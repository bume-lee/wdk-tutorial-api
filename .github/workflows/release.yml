name: Release if bump version number

on:
  push:
    branches:
      - main
    paths:
      - version.py

jobs:
  check-bump-version:
    runs-on: ubuntu-latest
    outputs:
      new-version: ${{ steps.diff.outputs.version }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 100

      - name: Get version number diff
        run: 
#          version="$(git diff ${{ github.event.before }}..${{ github.event.after }} version.py | sed -nr '/^\+ +\__version\__ = /p' | sed -r 's/^.*\"([0-9a-z\.\-\+]+)\"*.$/\1/')"
#          echo "::set-output name=version::$version"
          echo "::set-output name=version::$(sed -e "s#.*=\(\)#\1#;s/'//g" version.py)"
        id: diff

  release:
    needs: check-bump-version
    if: ${{ needs.check-bump-version.outputs.new-version }}
    runs-on: ubuntu-latest

    steps:
      - uses: release-drafter/release-drafter@v5
        with:
          config-name: release-drafter-config.yml
          version: v${{ needs.check-bump-version.outputs.new-version }}
          publish: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        # After tagged, openupm.com gets the tag and automatically publishes the UPM package.

  prepare:
    needs: release
    runs-on: ubuntu-latest
    outputs:
      docker_image: ${{steps.prep.outputs.docker_image}}
      date: ${{ steps.date.outputs.date }}
      tag: ${{steps.prep.outputs.tag}}
      tags: ${{steps.prep.outputs.tags}}
    steps:
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +%F)"
      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE="$(echo "${GITHUB_REPOSITORY/docker-/}" | tr '[:upper:]' '[:lower:]')"
          set -x
          if [[ $GITHUB_REF == refs/heads/* ]]; then
             if [[ $GITHUB_REF == refs/heads/*/* ]] ; then
               BRANCH="${DOCKER_IMAGE}:$(echo $GITHUB_REF | sed "s|refs/heads/||g" | sed "s|/|-|g")"
             else
               BRANCH=${GITHUB_REF#refs/heads/}
             fi
            case ${BRANCH} in
              "main" )
                  TAG="latest"
                  BRANCHTAG="${DOCKER_IMAGE}:latest"
                ;;
              * )
            esac
          fi
          if [[ $GITHUB_REF == refs/tags/* ]]; then
               GITTAG="${DOCKER_IMAGE}:$(echo $GITHUB_REF | sed 's|refs/tags/||g')"
          fi
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          if [ -n "${BRANCHTAG}" ] && [ -n "${GITTAG}" ]; then
            TAGS=${BRANCHTAG},${GITTAG}
          else
            TAGS="${BRANCHTAG}${GITTAG}"
          fi
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=docker_image::${DOCKER_IMAGE}
          echo ::set-output name=tag::${TAG}
          echo ::set-output name=version::${VERSION}

  api:
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
#          username: ${{ github.repository_owner }}
          password: ${{ github.token }}
#          password: ${{ secrets.CR_PAT }}
      - name: Api Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: |
            ghcr.io/${{needs.prepare.outputs.docker_image}}:${{needs.prepare.outputs.tag}}